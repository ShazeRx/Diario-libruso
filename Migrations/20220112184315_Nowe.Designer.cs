// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using diario_libruso.Data;

namespace diario_libruso.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220112184315_Nowe")]
    partial class Nowe
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "4e376d92-46b4-4c9d-8b4a-a28cb1dd242b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            ConcurrencyStamp = "4bb2aa13-2ffe-4cfa-a0b7-706e7fd60cfc",
                            Name = "Uczen",
                            NormalizedName = "UCZEN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            ConcurrencyStamp = "0b9e4369-52e9-4d11-97ef-b0652eb7c1be",
                            Name = "Rodzic",
                            NormalizedName = "RODZIC"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7213",
                            ConcurrencyStamp = "d3d63ce5-4a0a-41f3-90b3-1481cffaf6ef",
                            Name = "Nauczyciel",
                            NormalizedName = "NAUCZYCIEL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf017bee-6527-4913-aaa5-769da7434864",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELSAHEbe6AnZMGHwqvv9KuFdsG1GgIhhp/tVxJ/tOyI40Wit+oHdxVI8MD6M7wEk2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "748ce43c-82e4-4ab4-a416-c075d018432a",
                            TwoFactorEnabled = false,
                            UserName = "admin@email.com"
                        },
                        new
                        {
                            Id = "e445865-a24d-4543-a6c6-9443d038cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87780481-8d24-401e-86e2-1d303d3b970a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "RODZIC@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJG573TMylZYXVkxYwnicyklkrwWmEJFt7lqXOroa5xTq1LPtAyQRMn+4QBvfJgSuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a85ef4bf-634b-4c89-b280-9ed9089f740a",
                            TwoFactorEnabled = false,
                            UserName = "rodzic@email.com"
                        },
                        new
                        {
                            Id = "e445865-a24d-6543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6bea1018-a395-40d0-a514-8a19fe1a0ca2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "UCZEN@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOdQmyNzmvVo5vgbJvitGa7uk+5Z3ULgxony9oA8ReafdCie1RHrmOrriU8yyamSnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10255250-596e-4f1c-ae8e-513e6a064527",
                            TwoFactorEnabled = false,
                            UserName = "uczen@email.com"
                        },
                        new
                        {
                            Id = "e445865-a24d-6543-a6c6-9443d048cab9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe7a0c2a-8777-4054-9e29-8971f143f256",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NAUCZYCIEL@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMwd7UfZtLE3OnLh4uE7747aInmbPKgu4OxBRazIKlIvdC5VfYoGcO+X+fzi8XkqqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c45dae6-9649-4260-877c-6aa576e731e9",
                            TwoFactorEnabled = false,
                            UserName = "rodzic@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "e445865-a24d-6543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "e445865-a24d-4543-a6c6-9443d038cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "e445865-a24d-6543-a6c6-9443d048cab9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7213"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("diario_libruso.Models.Klasa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RokPoczatkowy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Znak")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Klasy");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RokPoczatkowy = 2016,
                            Znak = "3C"
                        },
                        new
                        {
                            Id = 2,
                            RokPoczatkowy = 2015,
                            Znak = "$C"
                        });
                });

            modelBuilder.Entity("diario_libruso.Models.Nauczyciel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imie")
                        .HasColumnType("TEXT");

                    b.Property<int>("KlasaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("KlasaId");

                    b.ToTable("Nauczyciele");
                });

            modelBuilder.Entity("diario_libruso.Models.Ogloszenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataDodania")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tresc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tytul")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ogloszenia");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ogloszenie");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            DataDodania = new DateTime(2022, 1, 12, 19, 43, 14, 507, DateTimeKind.Local).AddTicks(3980),
                            Tresc = "Bardzo wazne",
                            Tytul = "Wazne!!!"
                        });
                });

            modelBuilder.Entity("diario_libruso.Models.Przedmiot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwa")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Przedmioty");
                });

            modelBuilder.Entity("diario_libruso.Models.Rodzic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imie")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("TEXT");

                    b.Property<int>("UczenId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("UczenId");

                    b.ToTable("Rodzice");
                });

            modelBuilder.Entity("diario_libruso.Models.Uczen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imie")
                        .HasColumnType("TEXT");

                    b.Property<int>("KlasaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumerDziennika")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("KlasaId");

                    b.ToTable("Uczniowie");

                    b.HasData(
                        new
                        {
                            Id = 87,
                            IdentityUserId = "e445865-a24d-6543-a6c6-9443d048cdb9",
                            Imie = "Daniel",
                            KlasaId = 1,
                            Nazwisko = "Obajtek",
                            NumerDziennika = 2
                        });
                });

            modelBuilder.Entity("diario_libruso.Models.OgloszenieKlasowe", b =>
                {
                    b.HasBaseType("diario_libruso.Models.Ogloszenie");

                    b.Property<int>("KlasaId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("KlasaId");

                    b.HasDiscriminator().HasValue("OgloszenieKlasowe");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            DataDodania = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Tresc = "Super wazne",
                            Tytul = "Mega wazne",
                            KlasaId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("diario_libruso.Models.Nauczyciel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.HasOne("diario_libruso.Models.Klasa", "Klasa")
                        .WithMany()
                        .HasForeignKey("KlasaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klasa");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diario_libruso.Models.Rodzic", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.HasOne("diario_libruso.Models.Uczen", "Uczen")
                        .WithMany()
                        .HasForeignKey("UczenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uczen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diario_libruso.Models.Uczen", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.HasOne("diario_libruso.Models.Klasa", "Klasa")
                        .WithMany("Uczniowie")
                        .HasForeignKey("KlasaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klasa");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diario_libruso.Models.OgloszenieKlasowe", b =>
                {
                    b.HasOne("diario_libruso.Models.Klasa", "Klasa")
                        .WithMany()
                        .HasForeignKey("KlasaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klasa");
                });

            modelBuilder.Entity("diario_libruso.Models.Klasa", b =>
                {
                    b.Navigation("Uczniowie");
                });
#pragma warning restore 612, 618
        }
    }
}
