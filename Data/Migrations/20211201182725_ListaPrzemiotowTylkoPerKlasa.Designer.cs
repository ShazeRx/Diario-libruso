// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using diario_libruso.Data;

namespace diario_libruso.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211201182725_ListaPrzemiotowTylkoPerKlasa")]
    partial class ListaPrzemiotowTylkoPerKlasa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("ListaPrzedmiotowPrzedmiot", b =>
                {
                    b.Property<int>("ListaPrzedmiotowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrzedmiotyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ListaPrzedmiotowId", "PrzedmiotyId");

                    b.HasIndex("PrzedmiotyId");

                    b.ToTable("ListaPrzedmiotowPrzedmiot");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "2298af0b-799b-414d-a42f-06933642d012",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            ConcurrencyStamp = "3188a276-d079-42e2-83bc-4a953c61eb91",
                            Name = "Uczen",
                            NormalizedName = "UCZEN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            ConcurrencyStamp = "f86388f7-2058-4a1f-b17c-1270242c5ae0",
                            Name = "Rodzic",
                            NormalizedName = "RODZIC"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7213",
                            ConcurrencyStamp = "d01842f8-c64d-407a-8228-920472f74056",
                            Name = "Nauczyciel",
                            NormalizedName = "NAUCZYCIEL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d43d005f-b4d0-4946-bdc2-6df0950af4ce",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI5AEOcNkaGoCQOPDgXsGqom2zHPT4q8htzXg2VTHUdE0N5eYCXK5Gz4YnQr57X9RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1051b947-2dc7-4f24-b87e-f8288abeabd9",
                            TwoFactorEnabled = false,
                            UserName = "admin@email.com"
                        },
                        new
                        {
                            Id = "e445865-a24d-4543-a6c6-9443d038cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ab67ace-519c-442c-9476-171b5364e130",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "RODZIC@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN1ObMCPvnDUIWA75xVMLl/rPSYy17pppwvX2SQIQusc1kkseNJ7YhmZ3IJpUIwR2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b235fe1f-9b69-40a3-a088-08270174923c",
                            TwoFactorEnabled = false,
                            UserName = "rodzic@email.com"
                        },
                        new
                        {
                            Id = "e445865-a24d-6543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77e1afa0-124e-40ce-8c02-a7f2c5ff8a44",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "UCZEN@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHdXFsXYu6e+1dCXx00Cgus91sSoQ2GRo02g89xo3RqGzn3JrnxOP+iKtWp19m2+aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1cd922e-e209-47fd-a38c-cdb8dc08b719",
                            TwoFactorEnabled = false,
                            UserName = "uczen@email.com"
                        },
                        new
                        {
                            Id = "e445865-a24d-6543-a6c6-9443d048cab9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67d5e535-8142-4c7e-bdb9-3fde7b6e110c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NAUCZYCIEL@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHwkn6RmnyYipDu02ENt8nokl1R6Gga8esUSfWL3IdlqJsNTmLyplN47hcMWThFu2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fee82552-9ea2-4489-a528-a4f817039bd7",
                            TwoFactorEnabled = false,
                            UserName = "nauczyciel@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "e445865-a24d-6543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "e445865-a24d-4543-a6c6-9443d038cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "e445865-a24d-6543-a6c6-9443d048cab9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7213"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("diario_libruso.Models.Klasa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RokPoczatkowy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Znak")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Klasy");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RokPoczatkowy = 2016,
                            Znak = "3C"
                        },
                        new
                        {
                            Id = 2,
                            RokPoczatkowy = 2015,
                            Znak = ""
                        });
                });

            modelBuilder.Entity("diario_libruso.Models.ListaPrzedmiotow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("KlasaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwa")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KlasaId")
                        .IsUnique();

                    b.ToTable("ListyPrzedmiotow");
                });

            modelBuilder.Entity("diario_libruso.Models.Ogloszenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataDodania")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tresc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tytul")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ogloszenia");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ogloszenie");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            DataDodania = new DateTime(2021, 12, 1, 19, 27, 23, 983, DateTimeKind.Local).AddTicks(5000),
                            Tresc = "Bardzo wazne",
                            Tytul = "Wazne!!!"
                        });
                });

            modelBuilder.Entity("diario_libruso.Models.Przedmiot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdNauczyciela")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .HasColumnType("TEXT");

                    b.Property<string>("Opis")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdNauczyciela");

                    b.ToTable("Przedmioty");
                });

            modelBuilder.Entity("diario_libruso.Models.Uczen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("KlasaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumerDziennika")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("KlasaId");

                    b.ToTable("Uczniowie");

                    b.HasData(
                        new
                        {
                            Id = 87,
                            IdentityUserId = "e445865-a24d-6543-a6c6-9443d048cdb9",
                            KlasaId = 1,
                            NumerDziennika = 2
                        });
                });

            modelBuilder.Entity("diario_libruso.Models.OgloszenieKlasowe", b =>
                {
                    b.HasBaseType("diario_libruso.Models.Ogloszenie");

                    b.Property<int>("KlasaId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("KlasaId");

                    b.HasDiscriminator().HasValue("OgloszenieKlasowe");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            DataDodania = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Tresc = "Super wazne",
                            Tytul = "Mega wazne",
                            KlasaId = 1
                        });
                });

            modelBuilder.Entity("ListaPrzedmiotowPrzedmiot", b =>
                {
                    b.HasOne("diario_libruso.Models.ListaPrzedmiotow", null)
                        .WithMany()
                        .HasForeignKey("ListaPrzedmiotowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diario_libruso.Models.Przedmiot", null)
                        .WithMany()
                        .HasForeignKey("PrzedmiotyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("diario_libruso.Models.ListaPrzedmiotow", b =>
                {
                    b.HasOne("diario_libruso.Models.Klasa", "Klasa")
                        .WithOne("ListaPrzedmiotow")
                        .HasForeignKey("diario_libruso.Models.ListaPrzedmiotow", "KlasaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klasa");
                });

            modelBuilder.Entity("diario_libruso.Models.Przedmiot", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Nauczyciel")
                        .WithMany()
                        .HasForeignKey("IdNauczyciela");

                    b.Navigation("Nauczyciel");
                });

            modelBuilder.Entity("diario_libruso.Models.Uczen", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.HasOne("diario_libruso.Models.Klasa", "Klasa")
                        .WithMany("Uczniowie")
                        .HasForeignKey("KlasaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klasa");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diario_libruso.Models.OgloszenieKlasowe", b =>
                {
                    b.HasOne("diario_libruso.Models.Klasa", "Klasa")
                        .WithMany()
                        .HasForeignKey("KlasaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klasa");
                });

            modelBuilder.Entity("diario_libruso.Models.Klasa", b =>
                {
                    b.Navigation("ListaPrzedmiotow");

                    b.Navigation("Uczniowie");
                });
#pragma warning restore 612, 618
        }
    }
}
